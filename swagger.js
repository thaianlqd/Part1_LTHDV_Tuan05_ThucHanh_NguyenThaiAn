// swagger.js (ƒë·∫∑t ·ªü th∆∞ m·ª•c g·ªëc)
const swaggerUi = require("swagger-ui-express");
const swaggerJsDoc = require("swagger-jsdoc");

const options = {
  definition: {
    openapi: "3.0.0",
    info: {
      title: "CRUD Demo API",
      version: "1.0.0",
      description: "T√†i li·ªáu API cho ·ª©ng d·ª•ng CRUD Demo (Products & Suppliers)",
    },
    servers: [
      {
        url: "http://localhost:3000",
      },
    ],
    tags: [
      { name: "Products", description: "API qu·∫£n l√Ω s·∫£n ph·∫©m" },
      { name: "Suppliers", description: "API qu·∫£n l√Ω nh√† cung c·∫•p" },
    ],
  },
  apis: [], // sau n√†y b·∫°n c√≥ th·ªÉ th√™m jsdoc t·ª´ controllers/routes n·∫øu mu·ªën
};

// üëâ ƒê·ªãnh nghƒ©a paths ri√™ng (products + suppliers)
const paths = {
  "/products": {
    get: {
      tags: ["Products"],
      summary: "L·∫•y danh s√°ch s·∫£n ph·∫©m",
      responses: {
        200: { description: "Danh s√°ch s·∫£n ph·∫©m" },
      },
    },
    post: {
      tags: ["Products"],
      summary: "Th√™m s·∫£n ph·∫©m m·ªõi",
      requestBody: {
        required: true,
        content: {
          "application/json": {
            schema: {
              type: "object",
              required: ["name", "price"],
              properties: {
                name: { type: "string" },
                price: { type: "number" },
                quantity: { type: "integer" },
                supplier: { type: "string" },
              },
            },
          },
        },
      },
      responses: {
        201: { description: "T·∫°o s·∫£n ph·∫©m th√†nh c√¥ng" },
      },
    },
  },
  "/products/{id}": {
    get: {
      tags: ["Products"],
      summary: "L·∫•y chi ti·∫øt s·∫£n ph·∫©m",
      parameters: [
        { name: "id", in: "path", required: true, schema: { type: "string" } },
      ],
      responses: {
        200: { description: "Th√¥ng tin s·∫£n ph·∫©m" },
        404: { description: "Kh√¥ng t√¨m th·∫•y" },
      },
    },
    put: {
      tags: ["Products"],
      summary: "C·∫≠p nh·∫≠t s·∫£n ph·∫©m",
      parameters: [
        { name: "id", in: "path", required: true, schema: { type: "string" } },
      ],
      requestBody: {
        required: true,
        content: {
          "application/json": {
            schema: {
              type: "object",
              properties: {
                name: { type: "string" },
                price: { type: "number" },
                quantity: { type: "integer" },
                supplier: { type: "string" },
              },
            },
          },
        },
      },
      responses: {
        200: { description: "C·∫≠p nh·∫≠t th√†nh c√¥ng" },
        404: { description: "Kh√¥ng t√¨m th·∫•y" },
      },
    },
    delete: {
      tags: ["Products"],
      summary: "X√≥a s·∫£n ph·∫©m",
      parameters: [
        { name: "id", in: "path", required: true, schema: { type: "string" } },
      ],
      responses: {
        200: { description: "X√≥a th√†nh c√¥ng" },
        404: { description: "Kh√¥ng t√¨m th·∫•y" },
      },
    },
  },
  "/suppliers": {
    get: {
      tags: ["Suppliers"],
      summary: "L·∫•y danh s√°ch nh√† cung c·∫•p",
      responses: {
        200: { description: "Danh s√°ch nh√† cung c·∫•p" },
      },
    },
    post: {
      tags: ["Suppliers"],
      summary: "Th√™m nh√† cung c·∫•p m·ªõi",
      requestBody: {
        required: true,
        content: {
          "application/json": {
            schema: {
              type: "object",
              required: ["name", "phone"],
              properties: {
                name: { type: "string" },
                address: { type: "string" },
                phone: { type: "string" },
              },
            },
          },
        },
      },
      responses: {
        201: { description: "T·∫°o m·ªõi th√†nh c√¥ng" },
      },
    },
  },
  "/suppliers/{id}": {
    get: {
      tags: ["Suppliers"],
      summary: "L·∫•y th√¥ng tin nh√† cung c·∫•p",
      parameters: [
        { name: "id", in: "path", required: true, schema: { type: "string" } },
      ],
      responses: {
        200: { description: "Th√¥ng tin nh√† cung c·∫•p" },
        404: { description: "Kh√¥ng t√¨m th·∫•y" },
      },
    },
    put: {
      tags: ["Suppliers"],
      summary: "C·∫≠p nh·∫≠t nh√† cung c·∫•p",
      parameters: [
        { name: "id", in: "path", required: true, schema: { type: "string" } },
      ],
      requestBody: {
        required: true,
        content: {
          "application/json": {
            schema: {
              type: "object",
              properties: {
                name: { type: "string" },
                address: { type: "string" },
                phone: { type: "string" },
              },
            },
          },
        },
      },
      responses: {
        200: { description: "C·∫≠p nh·∫≠t th√†nh c√¥ng" },
        404: { description: "Kh√¥ng t√¨m th·∫•y" },
      },
    },
    delete: {
      tags: ["Suppliers"],
      summary: "X√≥a nh√† cung c·∫•p",
      parameters: [
        { name: "id", in: "path", required: true, schema: { type: "string" } },
      ],
      responses: {
        200: { description: "X√≥a th√†nh c√¥ng" },
        404: { description: "Kh√¥ng t√¨m th·∫•y" },
      },
    },
  },
};

// export function ƒë·ªÉ d√πng trong app.js
module.exports = (app) => {
  const swaggerDocs = swaggerJsDoc(options);
  // g·∫Øn paths th·ªß c√¥ng
  swaggerDocs.paths = paths;
  app.use("/api-docs", swaggerUi.serve, swaggerUi.setup(swaggerDocs));
};
